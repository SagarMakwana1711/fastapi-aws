AWSTemplateFormatVersion: '2010-09-09'
Description: GitHub -> CodePipeline -> CodeBuild -> CodeDeploy (EC2). No ECR repo/EC2/ALB/ASG creation. Uses artifacts appspec/scripts.

Parameters:
  ConnectionArn:
    Type: String
    Description: CodeStar Connections ARN for your GitHub connection (already created & authorized)
    Default: arn:aws:codeconnections:us-east-1:145023132787:connection/9863b3fb-681a-4beb-9368-fd492d8182c4

  GitHubOwner:
    Type: String
    Description: GitHub owner/org name
    Default: SagarMakwana1711

  GitHubRepo:
    Type: String
    Description: GitHub repository name
    Default: fastapi-aws

  GitBranch:
    Type: String
    Default: main
    Description: Git branch to build

  ArtifactBucketName:
    Type: String
    Default: ''
    Description: Optional pre-existing S3 bucket for pipeline artifacts. Leave empty to create one.

  CodeBuildComputeType:
    Type: String
    AllowedValues: [BUILD_GENERAL1_SMALL, BUILD_GENERAL1_MEDIUM, BUILD_GENERAL1_LARGE, BUILD_GENERAL1_2XLARGE]
    Default: BUILD_GENERAL1_SMALL
    Description: CodeBuild compute type

  CodeBuildImage:
    Type: String
    Default: aws/codebuild/standard:7.0
    Description: CodeBuild Linux image (Docker available)

  DeployTagKey:
    Type: String
    Default: CodeDeploy
    Description: EC2 instance tag key to target
  DeployTagValue:
    Type: String
    Default: fastapi
    Description: EC2 instance tag value to target

Conditions:
  CreateArtifactBucket: !Equals [!Ref ArtifactBucketName, '']

Resources:
  ArtifactBucket:
    Type: AWS::S3::Bucket
    Condition: CreateArtifactBucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  ArtifactBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: CreateArtifactBucket
    Properties:
      Bucket: !Ref ArtifactBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: EnforceTLS
            Effect: Deny
            Principal: "*"
            Action: s3:*
            Resource:
              - !Sub arn:${AWS::Partition}:s3:::${ArtifactBucket}
              - !Sub arn:${AWS::Partition}:s3:::${ArtifactBucket}/*
            Condition:
              Bool:
                aws:SecureTransport: false

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: CodeBuildBaseS3LogsECR
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: Logs
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"
              - Sid: S3Artifacts
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                  - s3:GetBucketLocation
                Resource:
                  - !If
                    - CreateArtifactBucket
                    - !Sub arn:${AWS::Partition}:s3:::${ArtifactBucket}
                    - !Sub arn:${AWS::Partition}:s3:::${ArtifactBucketName}
                  - !If
                    - CreateArtifactBucket
                    - !Sub arn:${AWS::Partition}:s3:::${ArtifactBucket}/*
                    - !Sub arn:${AWS::Partition}:s3:::${ArtifactBucketName}/*
              - Sid: ECRAuth
                Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                Resource: "*"
              - Sid: ECRPushPullWildcard
                Effect: Allow
                Action:
                  - ecr:BatchCheckLayerAvailability
                  - ecr:CompleteLayerUpload
                  - ecr:InitiateLayerUpload
                  - ecr:PutImage
                  - ecr:UploadLayerPart
                  - ecr:BatchGetImage
                  - ecr:GetDownloadUrlForLayer
                  - ecr:DescribeRepositories
                Resource: "*"

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub '${AWS::StackName}-docker-build'
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        ComputeType: !Ref CodeBuildComputeType
        Image: !Ref CodeBuildImage
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
      Source:
        Type: CODEPIPELINE
      TimeoutInMinutes: 60
      QueuedTimeoutInMinutes: 480
      Cache:
        Type: NO_CACHE

  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole

  CodeDeployInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Policies:
        - PolicyName: ECRAndS3ForAgentAndDocker
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: ECRPull
                Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:DescribeRepositories
                Resource: "*"
              - Sid: S3ArtifactsDownload
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketLocation
                Resource:
                  - !If
                    - CreateArtifactBucket
                    - !Sub arn:${AWS::Partition}:s3:::${ArtifactBucket}
                    - !Sub arn:${AWS::Partition}:s3:::${ArtifactBucketName}
                  - !If
                    - CreateArtifactBucket
                    - !Sub arn:${AWS::Partition}:s3:::${ArtifactBucket}/*
                    - !Sub arn:${AWS::Partition}:s3:::${ArtifactBucketName}/*
              - Sid: KMSDecryptSSM
                Effect: Allow
                Action:
                  - kms:Decrypt
                Resource: "*"

  CodeDeployInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref CodeDeployInstanceRole
      Path: /

  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Sub '${AWS::StackName}-app'
      ComputePlatform: Server

  CodeDeployDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref CodeDeployApplication
      DeploymentGroupName: !Sub '${AWS::StackName}-dg'
      ServiceRoleArn: !GetAtt CodeDeployServiceRole.Arn
      DeploymentStyle:
        DeploymentOption: WITHOUT_TRAFFIC_CONTROL
        DeploymentType: IN_PLACE
      Ec2TagFilters:
        - Key: !Ref DeployTagKey
          Value: !Ref DeployTagValue
          Type: KEY_AND_VALUE
      DeploymentConfigName: CodeDeployDefault.OneAtATime
      AutoRollbackConfiguration:
        Enabled: true
        Events: [DEPLOYMENT_FAILURE]

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: CodePipelineCore
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: S3Artifacts
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketLocation
                Resource:
                  - !If
                    - CreateArtifactBucket
                    - !Sub arn:${AWS::Partition}:s3:::${ArtifactBucket}
                    - !Sub arn:${AWS::Partition}:s3:::${ArtifactBucketName}
                  - !If
                    - CreateArtifactBucket
                    - !Sub arn:${AWS::Partition}:s3:::${ArtifactBucket}/*
                    - !Sub arn:${AWS::Partition}:s3:::${ArtifactBucketName}/*
              - Sid: CodeBuildStart
                Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Resource: !GetAtt CodeBuildProject.Arn
              - Sid: PassCBRole
                Effect: Allow
                Action: iam:PassRole
                Resource: !GetAtt CodeBuildServiceRole.Arn
              - Sid: CodeStarConn
                Effect: Allow
                Action:
                  - codestar-connections:UseConnection
                Resource: !Ref ConnectionArn
              - Sid: CodeDeployActions
                Effect: Allow
                Action:
                  - codedeploy:CreateDeployment
                  - codedeploy:GetDeployment
                  - codedeploy:RegisterApplicationRevision
                  - codedeploy:GetApplication
                  - codedeploy:GetApplicationRevision
                  - codedeploy:GetDeploymentConfig
                  - codedeploy:GetDeploymentGroup
                Resource: "*"


  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub '${AWS::StackName}-pipeline'
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !If [CreateArtifactBucket, !Ref ArtifactBucket, !Ref ArtifactBucketName]
      Stages:
        - Name: Source
          Actions:
            - Name: GitHub_Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: '1'
              Configuration:
                ConnectionArn: !Ref ConnectionArn
                FullRepositoryId: !Sub '${GitHubOwner}/${GitHubRepo}'
                BranchName: !Ref GitBranch
                DetectChanges: 'true'
              OutputArtifacts:
                - Name: SourceOutput
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Docker_Build_and_Push
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: CodeDeploy_EC2_InPlace
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeploy
                Version: '1'
              Configuration:
                ApplicationName: !Ref CodeDeployApplication
                DeploymentGroupName: !Ref CodeDeployDeploymentGroup
              InputArtifacts:
                - Name: BuildOutput
              RunOrder: 1

Outputs:
  PipelineName:
    Value: !Ref Pipeline
    Description: CodePipeline name
  ArtifactBucket:
    Value: !If [CreateArtifactBucket, !Ref ArtifactBucket, !Ref ArtifactBucketName]
    Description: S3 bucket used for pipeline artifacts
  CodeBuildProjectName:
    Value: !Ref CodeBuildProject
    Description: CodeBuild project name
  CodeDeployApplicationName:
    Value: !Ref CodeDeployApplication
    Description: CodeDeploy application name
  CodeDeployDeploymentGroupName:
    Value: !Ref CodeDeployDeploymentGroup
    Description: CodeDeploy deployment group name
  EC2InstanceProfileName:
    Value: !Ref CodeDeployInstanceProfile
    Description: Attach this InstanceProfile to your EC2 (manually) so the deploy works
